//
//  AchievementPresenter.swift
//  StashInvest
//
//  Created by Chanick Park on 1/12/21.

//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class AchievementPresenter {

    // MARK: - Private properties -

    private unowned let view: AchievementViewInterface
    private let interactor: AchievementInteractorInterface
    private let wireframe: AchievementWireframeInterface

    // MARK: - Lifecycle -

    init(view: AchievementViewInterface, interactor: AchievementInteractorInterface, wireframe: AchievementWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - AchievementPresenterInterface

extension AchievementPresenter: AchievementPresenterInterface {
    func viewDidLoad() {

        // Request achievements
        interactor.retrieveAchievement { [weak self] (error) in
            guard let `self` = self else {
                return
            }
            if let error = error {
                // Show fail message popup
                self.wireframe.showErrorAlert(with: error.localizedDescription)
                return
            }

            // Update view
            self.view.updateData(self.interactor.title ?? "")
        }
    }

    func numberOrItems(in section: Int) -> Int {
        return interactor.achievements?.count ?? 0
    }

    func item(at indexPath: IndexPath) -> Achievement? {
        return interactor.achievements?[safe: indexPath.row]
    }

    func didSelectItem(at indexPath: IndexPath) {
        if let achievement = item(at: indexPath) {
            wireframe.navigate(to: .detail(achievement))
        }
    }
}
