//
//  MockAchievementInteractor.swift
//  StashInvest
//
//  Created by Chanick Park on 1/14/21.

//
//  This file was generated by the 🐍 VIPER generator
//

import XCTest
@testable import StashInvest

final class MockAchievementInteractor: XCTestCase, MockAchievementInteractorInterface {
    var title: String?

    var achievements: [Achievement]?

    // Create Network manager with NetworkClient
    var achievementNetworkManager = MockAchievementNetworkManager(client: MockStashNetworkClient())
}

// MARK: - Network request

extension MockAchievementInteractor {
    // MARK: - Network request
    func retrieveAchievement(_ complete: @escaping (_ error: NetworkError?) -> Void) {
        self.achievementNetworkManager.retrieveAchievementList { (title, result) -> Void in
            switch result {
            case .success(let achievements):

                self.title = title
                self.achievements = achievements
                complete(nil)

            case .failure(let errors):
                complete(NetworkError.error(errors))
            }
        }
    }
}

extension MockAchievementInteractor {

    //
    // Test retrieveAchievement()
    //
    func testRetrieveAchievement() {
        retrieveAchievement { (error) -> Void in
            if let error = error {
                // Failed
                XCTFail(error.localizedDescription)
            } else {
                // Success
                XCTAssertEqual(self.title, "Smart Investing")
                XCTAssertEqual(self.achievements?.count ?? 0, 3)
            }
        }
    }

    //
    // Test load "achievements" only from json with keyPath
    //
    func testRetrieveAchievementOnly() {
        achievementNetworkManager.client.request(path: achievementNetworkManager.path, keyPath: "achievements") { (result: NetworkClientResult<[Achievement]> ) in
            switch result {
            case .success(let achievements):
                XCTAssertEqual(achievements.count, 3)

            case .failure(let errors):
                XCTFail(errors.first?.description ?? "")
            }
        }
    }

    //
    // Test load whole json data
    //
    func testRetrieveAchievementAll() {
        achievementNetworkManager.client.request(path: achievementNetworkManager.path) { (result: NetworkClientResult<Data>) in
            switch result {
                // success
                case .success(let data):
                    do {
                        if let json = try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any] {
                            // get title, achievements
                            guard let overview = json["overview"] as? [String: Any],
                                let achievements = json["achievements"] as? [Any] else {
                                    XCTFail(BundleRequestError.invalidData.localizedDescription)
                                    return
                            }

                            let success = json["success"] as? Bool
                            let status = json["status"] as? Int
                            let title = overview["title"] as? String

                            XCTAssertEqual(success, true)
                            XCTAssertEqual(status, 200)
                            XCTAssertEqual(title, "Smart Investing")
                            XCTAssertEqual(achievements.count, 3)

                        }
                    } catch let error {
                        XCTFail(error.localizedDescription)
                    }

                // failure
                case .failure(let errors):
                    XCTFail(errors.first?.description ?? "")
            }
        }
    }
}
